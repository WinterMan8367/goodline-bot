import telebot
from telebot import types

testbot = telebot.TeleBot("6454477981:AAFT67o3MnnNlXtjzGZezpOkLaNkw819N_E")
inmenu = types.InlineKeyboardButton(text = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data = "inmenu")
back = types.InlineKeyboardButton(text = "–ù–∞–∑–∞–¥", callback_data = "back")

user_dict = {}

class User:
  def __init__(self, user_id):
    self.user_id = user_id
    self.history = []
    self.back = False

  def __str__(self):
    return f"user_id: {self.user_id}\nhistory: {self.history}\nback: {self.back}"

# –û–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
def record_button(text_button, callback):
  return types.InlineKeyboardButton(text = text_button, callback_data = callback)

def record_func(user, data):
  if not user.back:
    user.history.append(data)
  else:
    user.back = False

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ + –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ------------------------------------ (–î–æ–¥–µ–ª–∞—Ç—å)
@testbot.message_handler(commands = ['start'])
def start_message(message):
  keyboard = types.ReplyKeyboardMarkup(resize_keyboard = True)
  reg_button = types.KeyboardButton(text = "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact = True)
  keyboard.add(reg_button)
  testbot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –±–æ—Ç-–∞–Ω–∞–ª–∏—Ç–∏–∫ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ï-–õ–∞–π—Ç-–¢–µ–ª–µ–∫–æ–º.\n–Ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é –∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –≤ –≤–∏–¥–µ –æ—Ç—á—ë—Ç–æ–≤, –≥—Ä–∞—Ñ–∏–∫–æ–≤, —ç–∫—Å–µ–ª—å-—Ç–∞–±–ª–∏—Ü—ã.\n\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã —è –ø—Ä–æ–≤–µ—Ä–∏–ª, –∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —Ç—ã –Ω–∞—à —Ä–∞–±–æ—Ç–Ω–∏–∫.', reply_markup=keyboard)
# ---------------------------------------------------------------------------------

@testbot.message_handler(content_types = ['contact'])
def echo(message):
  testbot.send_message(message.chat.id, message.contact.phone_number, reply_markup = types.ReplyKeyboardRemove())

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ [/Start] + –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---> {–ê–ö–ë}, {–î–µ–Ω—å–≥–∏}, {–ü—Ä–æ–¥–∞–∂–∏}
@testbot.message_handler(commands = ['menu'])
def start_keyboard(message):
  keyboard = types.InlineKeyboardMarkup()

  button_ACB = record_button("–ê–∫—Ç–∏–≤–Ω–∞—è –∫–ª–∏–µ–Ω—Ç—Å–∫–∞—è –±–∞–∑–∞", "ACB")
  button_money = record_button("–î–µ–Ω—å–≥–∏", "money")
  button_sales = record_button("–ü—Ä–æ–¥–∞–∂–∏", "sales")

  keyboard.add(button_ACB)
  keyboard.add(button_money, button_sales)

  testbot.send_message(message.chat.id, "–ö–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å? üí¨", reply_markup = keyboard)

  # –ü—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ [User]
  if user_dict.get(message.chat.id) == None:
    user_id = message.from_user.id
    user = User(user_id)
    user_dict[message.chat.id] = user
  else: user.history.clear()

# -----------------------------------------------------
  
@testbot.message_handler(commands = ['debug'])
def debug(message):
  keyboard = types.InlineKeyboardMarkup()
  reload_btn = types.InlineKeyboardButton(text = "–û–±–Ω–æ–≤–∏—Ç—å", callback_data = "reload")
  keyboard.add(reload_btn)
  text = ""
  for item in user_dict:
    text += f"\n{item};"
  testbot.send_message(message.chat.id, f"–¢–µ–∫—É—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n{text}\n---------------------\n–¢–µ–∫—É—â–∏–π —Å–µ–∞–Ω—Å:\n\n{user_dict[message.chat.id]}", reply_markup = keyboard)

# –ù–∞–≤–∏–≥–∞—Ü–∏—è –≤ –º–µ–Ω—é - [–û–±—Ä–∞–±–æ—Ç–∫–∏]
@testbot.callback_query_handler(func = lambda call: True)
def test_callback(call):
  if call.message:

    keyboard = types.InlineKeyboardMarkup()
    chat_id = call.message.chat.id
    msg_id = call.message.id
    user = user_dict[chat_id]

    # –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –æ–¥–∏–Ω —Ä–∞–∑–¥–µ–ª –Ω–∞–∑–∞–¥
    if call.data == "back":
      user.history.pop()

      call.data = user.history[-1] if len(user.history) != 0 else "inmenu"

      user.back = True

      testbot.answer_callback_query(call.id)

    if call.data == "reload":
      try:
        reload_btn = record_button("–û–±–Ω–æ–≤–∏—Ç—å", "reload")
        keyboard.add(reload_btn)

        text = ""
        for item in user_dict:
          text += f"\n{item};"

        testbot.edit_message_text(f"–¢–µ–∫—É—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n{text}\n---------------------\n–¢–µ–∫—É—â–∏–π —Å–µ–∞–Ω—Å:\n\n{user}", chat_id, msg_id, reply_markup = keyboard)

        testbot.answer_callback_query(call.id)
      except:
        testbot.answer_callback_query(call.id)

    # –ê–ö–ë ---> {–û–±—â–∞—è –ê–ö–ë}, {–ù–æ–≤—ã–µ}, {–û—Ç—Ç–æ–∫}, {–í–æ–∑–≤—Ä–∞—Ç}
    if call.data == "ACB":
      button_total_ACB = record_button("–û–±—â–∞—è –ê–ö–ë —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∞–±–æ–Ω–µ–Ω—Ç–∞", "total_ACB")
      button_new = record_button("–ù–æ–≤—ã–µ", "new")
      button_outflow = record_button("–û—Ç—Ç–æ–∫", "outflow")
      button_return = record_button("–í–æ–∑–≤—Ä–∞—Ç", "return")

      keyboard.add(button_total_ACB)
      keyboard.add(button_new, button_outflow, button_return)
      keyboard.add(inmenu)

      testbot.edit_message_text('–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', chat_id, msg_id, reply_markup = keyboard)

      record_func(user, call.data)

      testbot.answer_callback_query(call.id)
    # -----------------------------------------------------

    # –î–µ–Ω—å–≥–∏ ---> {–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è}, {–†–µ–∞–ª–∏–∑–∞—Ü–∏—è}
    elif call.data == "money":
      button_cash_receipts = record_button("–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è", "cash_receipts")
      button_implementation = record_button("–†–µ–∞–ª–∏–∑–∞—Ü–∏—è", "implementation")

      keyboard.add(button_cash_receipts, button_implementation)
      keyboard.add(inmenu)

      testbot.edit_message_text('–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', chat_id, msg_id, reply_markup = keyboard)

      record_func(user, call.data)

      testbot.answer_callback_query(call.id)
    # -----------------------------------------------------

    # –ü—Ä–æ–¥–∞–∂–∏ ---> {–£—Å–ª—É–≥–∏}, {–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ}
    elif call.data == "sales":
      button_services = record_button("–£—Å–ª—É–≥–∏", "services")
      button_equipment = record_button("–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", "equipment")

      keyboard.add(button_services, button_equipment);
      keyboard.add(inmenu)

      testbot.edit_message_text('–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', chat_id, msg_id, reply_markup = keyboard)

      record_func(user, call.data)

      testbot.answer_callback_query(call.id)
    # -----------------------------------------------------

    # {–ú–ö–î}, {–û–±—â–∞—è}, {–ì–µ–ø–æ–Ω}
    elif call.data in ["total_ACB", "new", "outflow", "return", "cash_receipts", "implementation", "all_channels", "selection_channel"]:
      button_apartment = record_button("–ú–ö–î (–ú–Ω–æ–≥–æ–∫–≤–∞—Ä—Ç–∏—Ä–Ω—ã–µ –¥–æ–º–∞)", "apartment")
      button_general = record_button("–û–±—â–∞—è", "general")
      button_gepon = record_button("–ì–µ–ø–æ–Ω", "gepon")

      if call.data in ["all_channels", "selection_channel"]:
        keyboard.add(button_apartment, button_gepon)
      else:
        keyboard.add(button_apartment)
        keyboard.add(button_general, button_gepon)
      keyboard.add(back, inmenu)

      testbot.edit_message_text('–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', chat_id, msg_id, reply_markup = keyboard)

      record_func(user, call.data)

      testbot.answer_callback_query(call.id)
    # -----------------------------------------------------

    # {–í—Å–µ –≥–æ—Ä–æ–¥–∞}, {–ü–æ –≥–æ—Ä–æ–¥–∞–º}, {–ü–æ —Ä–∞–π–æ–Ω–∞–º}
    elif user.history[0] != "sales" and call.data in ["apartment", "general", "gepon"]:
      button_all_cities = record_button("–í—Å–µ –≥–æ—Ä–æ–¥–∞", "all_cities")
      button_by_city = record_button("–ü–æ –≥–æ—Ä–æ–¥–∞–º", "by_city")
      button_by_district = record_button("–ü–æ —Ä–∞–π–æ–Ω–∞–º", "by_district")

      if user.history[0] == "ACB" and call.data != "gepon":
        keyboard.add(button_all_cities, button_by_city)
      else:
        keyboard.add(button_all_cities, button_by_city, button_by_district)
      keyboard.add(back, inmenu)

      testbot.edit_message_text('–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', chat_id, msg_id, reply_markup = keyboard)

      record_func(user, call.data)

      testbot.answer_callback_query(call.id)
    # -----------------------------------------------------

    # {–ü–æ —Å—Ç–∞—Ç—É—Å—É}, {–ü–ª–∞—Ç—è—â–∞—è}
    elif user.history[0] == "ACB" and call.data in ["all_cities", "by_city", "by_district"]:
      button_by_status = record_button("–ü–æ —Å—Ç–∞—Ç—É—Å—É", "by_status")
      button_by_paying = record_button("–ü–ª–∞—Ç—è—â–∞—è", "by_paying")

      keyboard.add(button_by_status, button_by_paying)
      keyboard.add(back, inmenu)

      testbot.edit_message_text('–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', chat_id, msg_id, reply_markup = keyboard)

      record_func(user, call.data)

      testbot.answer_callback_query(call.id)
    # -----------------------------------------------------

    # {–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü}, {–ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü}, {–¢–µ–∫—É—â–∏–π –≥–æ–¥}, {–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 3 –≥–æ–¥–∞}
    elif call.data in ["by_status", "by_paying", "services", "equipment"]:
      button_current_month = record_button("–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", "current_month")
      button_previous_month = record_button("–ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü", "previous_month")
      button_this_year = record_button("–¢–µ–∫—É—â–∏–π –≥–æ–¥", "this_year")
      button_statistics_3years = record_button("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 3 –≥–æ–¥–∞", "statistics_3years")

      if user.history[0] == "ACB":
        keyboard.add(button_previous_month, button_this_year, button_statistics_3years)
      else:
        keyboard.add(button_current_month, button_previous_month)
        keyboard.add(button_this_year, button_statistics_3years)
      keyboard.add(back, inmenu)

      testbot.edit_message_text('–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', chat_id, msg_id, reply_markup = keyboard)

      record_func(user, call.data)

      testbot.answer_callback_query(call.id)
    # -----------------------------------------------------

    # {–ü–æ –≤—Å–µ–º –∫–∞–Ω–∞–ª–∞–º}, {–í—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞}
    elif (user.history[0] == "sales") and call.data in ["current_month", "previous_month", "this_year", "statistics_3years"]:
      button_all_channels = record_button("–ü–æ –≤—Å–µ–º –∫–∞–Ω–∞–ª–∞–º", "all_channels")
      button_selection_channel = record_button("–í—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞", "selection_channel")

      keyboard.add(button_all_channels, button_selection_channel)
      keyboard.add(back, inmenu)

      testbot.edit_message_text('–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', chat_id, msg_id, reply_markup = keyboard)

      record_func(user, call.data)

      testbot.answer_callback_query(call.id)
    # -----------------------------------------------------

    # {–¢–∞–±–ª–∏—Ü–∞}, {–î–∏–∞–≥—Ä–∞–º–º–∞}, {–≠–∫—Å–µ–ª—å}
    elif  (user.history[0] == "ACB" and call.data in ["previous_month", "this_year", "statistics_3years"]) or (user.history[0] == "money" and call.data in ["all_cities", "by_city", "by_district"]) or (user.history[0] == "sales" and call.data in ["apartment", "gepon"]):
      button_table = record_button("–¢–∞–±–ª–∏—Ü–∞", "table")
      button_diagram = record_button("–î–∏–∞–≥—Ä–∞–º–º–∞", "diagram")
      button_excel = record_button("–≠–∫—Å–µ–ª—å", "excel")

      keyboard.add(button_table, button_diagram, button_excel)
      keyboard.add(back, inmenu)

      testbot.edit_message_text('–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', chat_id, msg_id, reply_markup = keyboard)

      record_func(user, call.data)

      testbot.answer_callback_query(call.id)
    # -----------------------------------------------------

    elif call.data == "inmenu":
      button_ACB = record_button("–ê–∫—Ç–∏–≤–Ω–∞—è –∫–ª–∏–µ–Ω—Ç—Å–∫–∞—è –±–∞–∑–∞", "ACB")
      button_money = record_button("–î–µ–Ω—å–≥–∏", "money")
      button_sales = record_button("–ü—Ä–æ–¥–∞–∂–∏", "sales")

      keyboard.add(button_ACB)
      keyboard.add(button_money, button_sales)

      testbot.edit_message_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n –ö–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å? üí¨", chat_id, msg_id, reply_markup = keyboard)

      user.history.clear()

      testbot.answer_callback_query(call.id)

    else:
      if call.data != 'reload':
        testbot.send_message(chat_id, "Error. Data: " + str(call.data))
        testbot.answer_callback_query(call.id)

testbot.infinity_polling()